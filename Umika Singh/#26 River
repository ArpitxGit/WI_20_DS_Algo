void dfs(vector<vector<int>>& grid, int x, int y, vector<vector<bool>>& visited,int &res)
    {
        int m=grid.size(),n=grid[0].size();
        visited[x][y]=true;
        res++;
        //traverse all the neighbours of x and y
        if(x+1<m && grid[x+1][y]==1 && !visited[x+1][y])dfs(grid,x+1,y,visited);
        if(x-1>=0 && grid[x-1][y]==1 && !visited[x-1][y])dfs(grid,x-1,y,visited);
        if(y+1<n && grid[x][y+1]==1 && !visited[x][y+1])dfs(grid,x,y+1,visited);
        if(y-1>=0 && grid[x][y-1]==1 && !visited[x][y-1])dfs(grid,x,y-1,visited);
    }
    vector<int> riverSizes(vector<vector<int>>& grid) {
        if(grid.size()==0)return 0;
        int m=grid.size(),n=grid[0].size(),i,j,res=0;
        vector<vector<bool>> visited(m,vector<bool>(n,false));
        vector<int> a;
        for(i=0;i<m;i++)
        {
            for(j=0;j<n;j++)
            {
            res=0;
                if(grid[i][j]==1 && !visited[i][j])
                {
                    dfs(grid,i,j,visited);
                    a.push_back(res);
                }
            }
        }
        return a;
    }
